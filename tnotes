#!/usr/bin/env python

import csv
import os
import argparse
import datetime as dt
from textwrap import indent

DEFAULT_COLUMNS=("date", "title", "nindex", "note")

def init_flags():
    parser = argparse.ArgumentParser(description="notes in tsv format")
    parser.add_argument(
        "-f",
        dest="notes_file",
        help="tsv file to store your notes; consider difference in column titles",
    )
    parser.add_argument(
        "title",
        nargs="*",
        help="title to write your notes; date->title->note"
    )
    parser.add_argument(
        "-w",
        dest="write_mode",
        help="when given writes to file, if given existing title - adds a note"
    )
    parser.add_argument(
        "-wr",
        dest="replace_mode",
        help="replaces note text"
    )
    parser.add_argument(
        "-i",
        dest="interactive_mode",
        action="store_true",
        help="when given uses promt to get input from user to add a note"
    )
    parser.add_argument(
        "-is",
        dest="inter_split",
        action="store_true",
        help="same as interactive mode but splits each line in individual note line/index"
    )
    parser.add_argument(
        "-d",
        dest="delete_mode",
        action="store_true",
        help="deletes note with given title"
    )
    parser.add_argument(
        "-l",
        dest="list_titles",
        action="store_true",
        help="lists all titles"
    )
    parser.add_argument(
        "-s",
        dest="search",
        help="text to search in note with given title or all notes if title was not given"
    )

    if len(os.sys.argv)==1:
        parser.print_help(os.sys.stderr)
        os.sys.exit(1)

    args = parser.parse_args()

    if args.notes_file is None:
        if "TNOTES_FILE" in os.environ and os.environ["TNOTES_FILE"]:
            args.notes_file = os.environ["TNOTES_FILE"]
        else:
            args.notes_file = "default.tsv"
    return args

class TNotes:
    def __init__(self, notes_file="default.tsv",
        columns=DEFAULT_COLUMNS, **kwargs):

        #path
        homepath = os.environ["HOME"]
        tnotes_dir = os.path.join(homepath, ".config/tnotes")
        os.makedirs(tnotes_dir, exist_ok=True)
        self.notes_file = os.path.join(tnotes_dir, notes_file)


        self.columns = columns
        self.index_to_return = None
        self.title = None

        # hardcode
        self.create_notes_file()

        arg_di = {**kwargs}
        nav_di = arg_di.copy()
        for key in arg_di:
            if key not in self.columns:
                nav_di.pop(key)

        # list titles 
        if "list_titles" in arg_di and arg_di["list_titles"]:
            self.get_all_titles()
            return

        # extract string from list
        if "title" in nav_di and nav_di["title"]:
            if len(nav_di["title"]) > 1:
                self.index_to_return = nav_di["title"][1]
            nav_di["title"] = nav_di["title"][0]
            # do I need that nav_di stuff?
            self.title = nav_di["title"]

        # parse index
        self.start_index, self.end_index = self.parse_index(self.index_to_return)

        #search mode
        if "search" in arg_di and arg_di["search"]:
            text_to_search = arg_di["search"]
            self.search_for_text(text_to_search)
            return


        # write mode
        if "write_mode" in arg_di and arg_di["write_mode"]:
            note_text = arg_di["write_mode"]

            if "date" in self.columns:
                nav_di["date"] = dt.datetime.now().isoformat()
            self.write_note(note_text=note_text, **nav_di)
            return

        elif "interactive_mode" in arg_di and arg_di["interactive_mode"]:
            note_text = self.get_input()
            if "date" in self.columns:
                nav_di["date"] = dt.datetime.now().isoformat()
            self.write_note(note_text=note_text, **nav_di)
            return

        elif "inter_split" in arg_di and arg_di["inter_split"]:
            text = self.get_input()
            text_lines = text.splitlines()
            nav_di["date"] = dt.datetime.now().isoformat()
            for line in text_lines:
                self.write_note(line, **nav_di)
            return
                            
        elif "replace_mode" in arg_di and arg_di["replace_mode"]:
            note_text = arg_di["replace_mode"]
            nav_di["note"] = note_text
            self.replace_note(**nav_di)
            return

        elif "delete_mode" in arg_di and arg_di["delete_mode"]:
            self.replace_note(**nav_di)
            return

        else:
            # read
            self.read_notes(**nav_di)

    def create_notes_file(self):
        """
        if notes_file does not exists
        create it with given column headers/titles
        """
        if not os.path.exists(self.notes_file):
            with open(self.notes_file, "w", newline="") as tsv_file:
                title_writer = csv.writer(tsv_file, delimiter="\t")
                title_writer.writerow(self.columns)

    def get_tsv_data(self):
        with open(self.notes_file) as tsvf:
            # might be really unefficient
            self.data_tsv = list(csv.DictReader(tsvf, delimiter="\t"))

    @staticmethod
    def parse_index(index):
        err_text = "given index cannot be converted to integer:"
        if not index:
            return 0, float("inf") 
        if ":" not in index:
            try:
                return int(index), int(index)
            except ValueError:
                print(err_text, index)
                os.sys.exit(1)
        else:
            start_index, end_index = index.split(":")
            try:
                start_index, end_index = int(start_index), int(end_index)
                return start_index, end_index
            except ValueError:
                print(err_text, start_index, end_index)
                os.sys.exit(1)


    def get_all_titles(self):
        """returns list of titles"""
        # read/update data
        self.get_tsv_data()
        titles = {row["title"] for row in self.data_tsv}
        for title in titles:
            print(title)
        return titles


    def write_note(self, note_text, **kwargs):
        row_dict = {**kwargs}
        row_dict["note"] = note_text

        # need to assert index to current row
        # check if note with that title exists
        # if it does, then take last index+1 else 0
        self.get_tsv_data()
        taken_indexes = [row["nindex"] for row in self.data_tsv
                        if row["title"] == row_dict["title"]]
        if not taken_indexes:
            row_dict["nindex"] = 0
        else:
            taken_indexes = [int(i) for i in taken_indexes]
            row_dict["nindex"] = max(taken_indexes) + 1

        key = self.check_keys(row_dict, self.columns)
        if key:
            raise f"""bad argument {key},
            given arguments should be {self.columns}"""
        with open(self.notes_file, "a", newline="") as tf:
            writer = csv.DictWriter(tf, fieldnames=self.columns,
                    delimiter="\t")
            writer.writerow(row_dict)

    def replace_note(self, **kwargs):
        """deletes all the lines of the note with given title"""
        row_dict = {**kwargs}
        # read all notes
        self.get_tsv_data()
        if "title" not in row_dict:
            print("error: no title given")
        filtered = [row for row in self.data_tsv
                    if row["title"] != row_dict["title"]]

        # add new note to cleared notes
        def append_if_note(row_di):
            if "note" in row_di:
                if "date" in self.columns:
                    row_di["date"] = dt.datetime.now().isoformat()
                filtered.append(row_di)

        if self.index_to_return:
            # find note to edit (actually needed only if index is given)
            target_rows = [row for row in self.data_tsv
                    if row["title"] == row_dict["title"]]
            if ":" not in self.index_to_return:
                try:
                    assert len(target_rows) > self.end_index
                    # set index
                    row_dict["nindex"] = self.index_to_return
                except (AssertionError, ValueError):
                    print("given index is not valid:",
                            self.index_to_return)
                    os.sys.exit(1)
                target_rows[self.end_index] = row_dict
                
            else: # multiindex
                try:
                    assert len(target_rows) > self.start_index
                    assert len(target_rows) > self.end_index
                    # set index
                    row_dict["nindex"] = self.start_index
                except (AssertionError, ValueError):
                    print("given index is not valid:",
                            self.index_to_return)
                    os.sys.exit(1)
                target_rows[self.start_index:self.end_index] = row_dict

            # return updated note to all notes
            # if there is actual note, otherwise it stays deleted
            for row_dict in target_rows:
                append_if_note(row_dict)

        # no index given, replace/delete whole note
        else:
            row_dict["nindex"] = 0
            append_if_note(row_dict)

               # write it
        if filtered:
            headers = filtered[0].keys()
        else:
            headers = ["date", "title", "nindex", "note"]
        with open(self.notes_file, "w", newline="") as tf:
            writer = csv.DictWriter(tf, headers, delimiter="\t")
            writer.writeheader()
            writer.writerows(filtered)

    def search_for_text(self, text):
        self.get_tsv_data()
        # do we have title?
        if self.title:
            from operator import itemgetter
            filtered = [row for row in self.data_tsv
                        if row["title"] == self.title 
                        and text.lower() in row["note"].lower()]
        else:
            filtered = sorted([row for row in self.data_tsv
                        if text.lower() in row["note"].lower()],
                        key=lambda di: di["title"])

        # print title then notes, then next title and notes etc
        title_flag = None
        for row in filtered:
            if row["title"] != title_flag:
                print(row["title"])
                title_flag = row["title"]
            print(row["nindex"], indent(row["note"], "\t"))



    def get_input(self):
        lines = list()
        print(f"""you're writing in {self.notes_file},
enter empty line to end input""")
        while True:
            line = input(">")
            if line:
                lines.append(line)
            else:
                break
        self.note_text = """\n""".join(lines)
        return self.note_text

    def read_notes(self, **kwargs):
        nav_di = {**kwargs}
        self.get_tsv_data()
        by_title = [row["note"] for row in self.data_tsv 
                if row["title"] == nav_di["title"]]

        # if no such notes with that title
        if not by_title:
            print("title not found:", nav_di["title"])
            return by_title

        print(nav_di["title"])
        [print(index, indent(row, "\t"))
            for index, row in enumerate(by_title)
            if index >= self.start_index and index <= self.end_index]

        return by_title


    @staticmethod
    def check_keys(di, keys):
        """
        checks if all dict keys are in keys
        if not returns key that not in keys
        """
        for key in di:
            if key not in keys:
                return key
        return None


if __name__ == "__main__":
    args = init_flags()
    flags = vars(args) # vars?

    tnotes = TNotes(**flags)
